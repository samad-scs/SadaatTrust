datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                   String        @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  email                String        @unique
  password             String
  gender               Gender
  phone                String
  isSuperAdmin         Boolean       @default(false)
  isDeleted            Boolean       @default(false)
  canViewData          Boolean       @default(false)
  status               Boolean       @default(true)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  accounts             Account[] // Relation for NextAuth.js
  sessions             Session[] // Relation for NextAuth.js
  createdBeneficiaries Beneficiary[] @relation("BeneficiaryCreatedBy")
  updatedBeneficiaries Beneficiary[] @relation("BeneficiaryUpdatedBy")
}

enum Gender {
  Male
  Female
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum GenderEnum {
  male
  female
  other
}

enum DependencyStatus {
  dependent
  independent
}

enum EducationLevel {
  noEducation
  primary
  secondary
  higher
  graduate
  postgraduate
  doctorate
}

enum EducationStatus {
  studying
  completed
  dropped
}

enum MaritalStatus {
  married
  single
  widowed
  divorced
  separated
}

enum ConditionalEnum {
  yes
  no
}

model Beneficiary {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  isDeleted Boolean    @default(false)
  name      String
  age       Int
  gender    GenderEnum
  mobile    String
  address   String
  parentId  String?

  // Education
  dependencyStatus DependencyStatus?
  educationLevel   EducationLevel?
  educationStatus  EducationStatus?
  institution      String?
  droppedReason    String?

  // Employment
  employmentStatus String // Zod enum
  employmentType   String?
  occupation       String?
  monthlyIncome    String?

  // Family Information
  maritalStatus               MaritalStatus?
  spouseName                  String?
  spouseAge                   Int?
  spouseOccupation            String?
  numberOfDependentChildren   Int?
  numberOfIndependentChildren Int?
  extraClasses                String?
  educationExpense            Int?
  lastResultPercentage        Int?

  // Economic Status
  familyIncome        String?
  earningMembers      String?
  primaryIncomeSource String?
  housingStatus       String?
  monthlyRent         String?
  assets              String[]

  // Health Information
  healthCondition  String?
  chronicIllnesses String?
  medication       String?
  healthInsurance  ConditionalEnum?
  insuranceType    String?
  disability       ConditionalEnum?
  disabilityType   String?
  medicalExpenses  String?

  // Government Benefits
  rationCardType    String?
  governmentSchemes String[]
  assistanceNeeds   String[]
  priorityLevel     String?

  // Comments
  comments String?

  createdBy String? @db.ObjectId
  updatedBy String? @db.ObjectId
  creator   User?   @relation("BeneficiaryCreatedBy", fields: [createdBy], references: [id])
  updater   User?   @relation("BeneficiaryUpdatedBy", fields: [updatedBy], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
